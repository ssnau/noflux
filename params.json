{"name":"Noflux","tagline":"a simple top down data flow implementation","body":"noflux\r\n--------\r\n\r\na simple top down data flow implementation.\r\n\r\n\r\ninstall\r\n----\r\n\r\n```\r\nnpm install noflux\r\n```\r\n\r\nusage\r\n-----\r\n\r\n```\r\nimport {connect, state} from \"noflux\";\r\nimport React from \"react\";\r\n\r\nstate.load({\r\n  name: 'jack'\r\n});\r\n\r\n@connect\r\nexport default class extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input onChange={e => state.set('name', e.target.value)} />\r\n                <p> hello, my name is {state.get('name')} </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n```\r\n\r\nThe page will be refresh once the state changes.\r\n\r\n\r\nAPI\r\n-----\r\n\r\n### connect\r\n\r\na function works as decrocation to bind a React class with `state`.\r\n`state` will emit `change` event after its modification and the instance\r\nof the class will be re-rendered.\r\n\r\n### state\r\n\r\nA instance of [dataton](http://npmjs.com/package/dataton) which implemented Copy-On-Write technique. You can:\r\n\r\n- `load`: load data into state.\r\n- `set`: set specific key-value for state.\r\n- `get`: get the correspond value for the provided key.\r\n- `cursor`: get the `cursor` from the provided path.\r\n\r\n\r\n\r\nLicense\r\n----\r\n\r\nMIT\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}